namespace console;

//const _max_float f64 = 1000000000;
//const _float_precision u8 = 6;

@extern(name = "putchar")
function putchar(char i32) i32;

public function write_bool(value bool)
{
    if (value)
    {
        write_string("true");
    }
    else
    {
        write_string("false");
    }
}

public function write_i8(value i8)
{
    if (value < 0)
    {
        putchar(i32('-'));
        value = -value;
    }
    write_u64(u64(value));
}

public function write_i16(value i16)
{
    if (value < 0)
    {
        putchar(i32('-'));
        value = -value;
    }
    write_u64(u64(value));
}

public function write_i32(value i32)
{
    if (value < 0)
    {
        putchar(i32('-'));
        value = -value;
    }
    write_u64(u64(value));
}

public function write_i64(value i64)
{
    if (value < 0)
    {
        putchar(i32('-'));
        value = -value;
    }
    write_u64(u64(value));
}

public function write_u8(value u8)
{
    write_u64(u64(value));
}

public function write_u16(value u16)
{
    write_u64(u64(value));
}

public function write_u32(value u32)
{
    write_u64(u64(value));
}

public function write_u64(value u64)
{
    var buffer [20]u8;
    var index i8 = 0;
    for (value != 0)
    {
        var digit u8 = u8(value / 10); //TO-DO check () and conversion
        buffer[index] = '0' + digit;
        index++;
        value = value / 10;
    }
    for (var i i8 = index - 1; i >= 0; i--)
    {
        putchar(i32(buffer[i]));
    }
}

public function write_string(string []u8)
{
    for (var i u32 = 0; string[i] != 0; i++)
    {
        putchar(i32(string[i]));
    }
}

/*
public function write_f64(value f64)
{
    if (value < 0)
    {
        putchar(i32('-'));
        value = -value;
    }



  // determine the decimal exponent
  // based on the algorithm by David Gay (https://www.ampl.com/netlib/fp/dtoa.c)
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
  const double z2 = z * z;
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
  // correct for rounding errors
  if (value < conv.F) {
    expval--;
    conv.F /= 10;
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
      if ((int)prec > expval) {
        prec = (unsigned)((int)prec - expval - 1);
      }
      else {
        prec = 0;
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
      // no characters in exponent
      minwidth = 0U;
      expval   = 0;
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
        --prec;
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
  if (width > minwidth) {
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
  }

  // rescale the float value
  if (expval) {
    value /= conv.F;
  }

  // output the floating part
  const size_t start_idx = idx;
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);

  // output the exponent part
  if (minwidth) {
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
    }
  }
  return idx;
}
}*/

// float16,32,64