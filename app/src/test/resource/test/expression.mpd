namespace test;

var u8_data u8 = 123;

public function expression()
{
    console.write_string("============ test expression ============\n");

    test_unary();
    test_binary();
    test_conversion();
    test_increment();
    test_decrement();
    test_scope();
    test_initializer();
    //test_member_access();
    test_subscripting();
    test_others();
}

public function test_unary()
{
    assert(true, "constant true should equal true\n");
    assert(!false, "constant !false should equal true\n");
    var v1 i32 = +1;
    assert(v1 == 1, "unary (+), +1 should equal 1\n");
    var v2 i32 = -v1;
    assert(v2 == -1, "unary (-), -1 should equal -1\n");
    var v3 u32 = ~1;
    assert(v3 == 4294967294, "unary (~), u32 ~1 should equal 4294967294\n");
    var v4 i32 = ~1;
    assert(v4 == -2, "unary (~), i32 ~1 should equal -2\n");
    var v5 bool = false;
    assert(!v5, "unary (!), !false should equal true\n");
    var v6 pointer<i32> = &v1;
    var v7 i32 = *v6;
    assert(v7 == 1, "unary (*), *variable should equal 1\n");
}

public function test_increment()
{
    var v i32 = 0;
    v++;
    assert(v == 1, "increment 1++ should equal 2\n");
}

public function test_decrement()
{
    var v i32 = 0;
    v--;
    assert(v == -1, "increment 1++ should equal 2\n");
}


public function test_binary()
{
    var v i32;
    v = 5;
    assert(v == 5, "assign v to 5\n");
    v += 5;
    assert(v == 10, "v plus assign 5 should equal 10\n");
    v -= 2;
    assert(v == 8, "v minus assign 2 should equal 8\n");
    v *= 2;
    assert(v == 16, "v multi assign 2 should equal 16\n");
    v /= 4;
    assert(v == 4, "v divide assign 4 should equal 4\n");
    v %= 3;
    assert(v == 1, "v rem assign 4 should equal 1\n");
    
    v <<= 2;
    assert(v == 4, "v left shift assign 2 should equal 4\n");
    v >>= 1;
    assert(v == 2, "v right shift assign 1 should equal 2\n");
    v |= 1;
    assert(v == 3, "v or assign 1 should equal 3\n");
    v ^= 8;
    assert(v == 11, "v xor assign 8 should equal 11\n");
    v &= 6;
    assert(v == 2, "v and assign 6 should equal 2\n");

    assert((11 | 6) == 15, "11 | 6 should equal 15\n");
    assert((11 ^ 6) == 13, "11 ^ 6 should equal 13\n");
    assert((11 & 6) == 2, "11 & 6 should equal 2\n");
    assert(9 == 9, "9 == 9 should be true\n");
    assert(9 != 6, "9 != 6 should be true\n");
    assert(6 < 9, "6 < 9 should be true\n");
    assert(9 <= 9, "9 <= 9 should be true\n");
    assert(9 > 6, "9 > 6 should be true\n");
    assert(9 >= 9, "9 >= 9 should be true\n");
    assert((1 << 2) == 4, "1 << 2 should equal 4\n");
    assert((4 >> 1) == 2, "4 >> 1 should equal 2\n");
    assert(9 + 9 == 18, "9 + 9 should equal 18\n");
    assert(9 - 6 == 3, "9 - 6 should equal 3\n");
    assert(9 * 9 == 81, "9 * 9 should equal 81\n");
    assert(9 / 3 == 3, "9 / 3 should equal 3\n");
    assert(9 % 6 == 3, "9 % 6 should equal 3\n");
    assert((true || false) == true, "true || false should be true\n");
    assert((true && false) == false, "true && false should be false\n");
}

public function test_others()
{
    assert((8 - 3) * 5 == 25, "(8 - 3) * 5 should equal 25\n");
    assert('a' == 97, "'a' should equal 97\n");
}

public function test_initializer()
{
    var numbers []u8 = {1, 2, 3, 4, 5};
    var cpu Cpu = {123, {456}};
    var cpus []Cpu = {{123, {456}}, {456, {789}}};
}

public function test_subscripting()
{
    var numbers []u8 = {1, 2, 3, 4, 5};
    assert(numbers[2] == 3, "numbers[2] should equal 3\n");
    numbers[2] = 9;
    assert(numbers[2] == 9, "numbers[2] should equal 9\n");
    var array []u8 = numbers;
    array[2] = 8;
    assert(array[2] == 8, "array[2] should equal 9\n");
    var array2 []u8 = array;
    array2[3] = 9;
    assert(array[3] == 9, "array2[3] should equal 9\n");
}

public function test_scope()
{
    assert(u8_data == 123, "package var u8_data should equal 123\n");
    {
        assert(u8_data == 123, "package var u8_data should equal 123\n");
        var test_u8_data u8 = 99;
        assert(test_u8_data == 99, "local var u8_data should equal 99\n");
        test_u8_data = 100;
    }
    assert(u8_data == 123, "package var u8_data should equal 123\n");
}
/*
public function member_access()
{
    var cpu Cpu = {123, {456}};
    var cpu1 pointer<Cpu> = &cpu;
    var cpu_array [2]pointer<Cpu>;
    cpu_array[0] = &cpu;
    cpu_array[1] = cpu1;

    //test global or package variable
    //test qualified enum

    libc.printf("global_array[2]: %d \n", global_array[2]);
    
    var sub SubData;
    libc.printf("sub.integer: %d \n", sub.integer);
    sub.integer = 5;
    libc.printf("sub.integer: %d \n", sub.integer);
    sub.float = 3.14;
    libc.printf("sub.float: %f \n", sub.float);
    sub.array[3] = 3;
    libc.printf("sub.array[3]: %d \n", sub.array[3]);

    var data Data;
    data.type = 5;
    libc.printf("data.value: %d \n", data.type);
    data.sub.integer = 8;
    libc.printf("data.sub.integer: %d \n", data.sub.integer);
    data.sub.array[3] = 9;
    libc.printf("data.sub.array[3]: %d \n", data.sub.array[3]);
}*/

public function test_conversion()
{
    var a0 i32 = 65856;
    var a1 i16 = i16(a0);
    assert(a1 == 320, "convert i32 to i16, should equal 320\n");
    var a2 i8 = i8(a1);
    assert(a2 == 64, "convert i16 to i8, should equal 64\n");
    var a3 f32 = -3.14;
    var a4 i8 = i8(a3);
    assert(a4 == -3, "convert f32 to i8, should equal -3\n");
    var a5 u8 = u8(a3);
    assert(a5 == 253, "convert f32 to u8, should equal 253\n");
    var a6 f16 = f16(a0);
    var a7 f64 = f64(a0);
    var a8 f32 = f32(a0);

    var raw pointer = &a3;
    var a9 pointer<i32> = raw;
    var a10 i32 = *a9;
}
