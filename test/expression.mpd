namespace test;

import libc;

const global_array [5]u8 = {1, 2, 3, 4, 5};

public struct Data
{
    public var sub SubData;
    public var type u8;
}

public struct SubData
{
    public var integer u8;
    public var float f32;
    public var array [5]u8;
}

public enum Color
{
    r,
    g,
    b
}

public function expression()
{
    libc.puts("============ test expression ============");
    unary();
    increment_decrement();
    binary();
    parentheses();
    literal();
    subscripting();
    member_access();
    conversion();
}

public function unary()
{
    var v1 i32 = +1;
    libc.printf("v1: %d \n", v1);
    var v2 i32 = -v1;
    libc.printf("v2: %d \n", v2);
    var v3 u32 = ~1;
    libc.printf("v3: %d \n", v3);
    var b1 bool = true;
    libc.printf("b1: %d \n", b1);
    var b2 bool = !b1;
    libc.printf("b2: %d \n", b2);
}

public function increment_decrement()
{
    var v4 i32 = 10;
    v4++;
    libc.printf("v4: %u \n", v4);
    v4 = 20;
    v4--;
    libc.printf("v4: %u \n", v4);
}

public function binary()
{
    var x i32 = 0;
    // assign
    x = 5;
    libc.printf("x: %d \n", x);
	// plus_assign
    x += 5;
    libc.printf("x: %d \n", x);
	// minus_assign
    x -= 1;
    libc.printf("x: %d \n", x);
	// mul_assign
    x *= 2;
    libc.printf("x: %d \n", x);
	// div_assign
    x /= 9;
    libc.printf("x: %d \n", x);
	// rem_assign
    x = 11;
    x %= 4;
    libc.printf("x: %d \n", x);
	// left_shift_assign
    x <<= 2;
    libc.printf("x: %d \n", x);
	// right_shift_assign:
    x >>= 1;
    libc.printf("x: %d \n", x);
	// or_assign
    x |= 15;
    libc.printf("x: %d \n", x);
	// xor_assign
    x ^= 8;
    libc.printf("x: %d \n", x);
	// and_assign
    x &= 6;
    libc.printf("x: %d \n", x);
	// bit_or
    libc.printf("x: %d \n", (15 | 8));
	// bit_xor
    libc.printf("x: %d \n", (15 ^ 8));
	// bit_and
    libc.printf("x: %d \n", (15 & 8));
	// equal
    libc.printf("x: %d \n", (10 == 10));
    // not_equal
    libc.printf("x: %d \n", (10 != 10));
    // less
    libc.printf("x: %d \n", (10 < 10));
    // less_equal
    libc.printf("x: %d \n", (10 <= 10));
    // greater
    libc.printf("x: %d \n", (10 > 10));
    // greater_equal
    libc.printf("x: %d \n", (10 >= 10));
	// left_shift
    libc.printf("x: %d \n", (10 << 3));
	// right_shift
    libc.printf("x: %d \n", (10 >> 1));
	// plus
    libc.printf("x: %d \n", (5 + 3));
	// minus
    libc.printf("x: %d \n", (5 - 3));
	// mul
    libc.printf("x: %d \n", (5 * 3));
	// div
    libc.printf("x: %d \n", (5 / 3));
	// rem
    libc.printf("x: %d \n", (5 % 3));
    // or
    libc.printf("bool: %d \n", (true || false));
    // and
    libc.printf("bool: %d \n", (true && false));
}

public function parentheses()
{
    libc.printf("parentheses: %d \n", ((5 + 6) * 3));
}

public function literal()
{
    var c u8 = 'a';
    libc.printf("c: %d \n", c);
    var b bool = true;
    libc.printf("b: %d \n", b);
    var i u8 = 123;
    libc.printf("i: %d \n", i);
    var f_16 f16 = 3.14;
    libc.printf("f16: %f \n", f_16);
    var f_32 f32 = 3.14;
    libc.printf("f32: %f \n", f_32);
    var f_64 f64 = 3.14;
    libc.printf("f64: %f \n", f_64);
    var str []u8 = "some string";
    libc.puts(str);
}

public function subscripting()
{
    var array [5]u8;
    libc.printf("array[0]: %d \n", array[0]);
    array[3] = 3;
    libc.printf("array[3]: %d \n", array[3]);

    var array2 []u8 = array;
    libc.printf("array2[0]: %d \n", array2[0]);
    libc.printf("array2[3]: %d \n", array2[3]);

    var array3 []u8 = array2;
    libc.printf("array3[0]: %d \n", array3[0]);
    libc.printf("array3[3]: %d \n", array3[3]);

    var array4 []u8;
    array4 = array3;
    libc.printf("array4[0]: %d \n", array4[0]);
    libc.printf("array4[3]: %d \n", array4[3]);

    var new_array [5]u8 = {1, 2, 3, 4, 5};
    libc.printf("new_array[0]: %d \n", new_array[0]);
    libc.printf("new_array[3]: %d \n", new_array[3]);
}

public function member_access()
{
    libc.printf("Color.g: %d \n", Color.g);
    libc.printf("global_array[2]: %d \n", global_array[2]);
    
    var sub SubData;
    libc.printf("sub.integer: %d \n", sub.integer);
    sub.integer = 5;
    libc.printf("sub.integer: %d \n", sub.integer);
    sub.float = 3.14;
    libc.printf("sub.float: %f \n", sub.float);
    sub.array[3] = 3;
    libc.printf("sub.array[3]: %d \n", sub.array[3]);

    var data Data;
    data.type = 5;
    libc.printf("data.value: %d \n", data.type);
    data.sub.integer = 8;
    libc.printf("data.sub.integer: %d \n", data.sub.integer);
    data.sub.array[3] = 9;
    libc.printf("data.sub.array[3]: %d \n", data.sub.array[3]);
}

public function conversion()
{
    var a0 i32 = 65636;
    var a1 i16 = i16(a0);
    var a2 i8 = i8(a1);
    libc.printf("convert i32 to i16: %d \n", a1);
    libc.printf("convert i16 to i8: %d \n", a2);
}
